import { NextRequest, NextResponse } from "next/server";

/**
 * –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
 */
const privateRoutes = ["/profile", "/notes"];

/**
 * –ú–∞—Ä—à—Ä—É—Ç–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó ‚Äî —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
 */
const authRoutes = ["/sign-in", "/sign-up"];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  const accessToken = request.cookies.get("accessToken")?.value;
  const refreshToken = request.cookies.get("refreshToken")?.value;

  const isAuthRoute = authRoutes.some((route) => pathname.startsWith(route));
  const isPrivateRoute = privateRoutes.some((route) =>
    pathname.startsWith(route)
  );

  /**
   * üîπ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –Ω–∞ /sign-in –∞–±–æ /sign-up ‚Äî
   * –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –π–æ–≥–æ –Ω–∞ /profile
   */
  if (isAuthRoute && (accessToken || refreshToken)) {
    const url = request.nextUrl.clone();
    url.pathname = "/profile";
    return NextResponse.redirect(url);
  }

  /**
   * üî∏ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É ‚Äî
   * –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –π–æ–≥–æ –Ω–∞ /sign-in
   */
  if (!accessToken && !refreshToken && isPrivateRoute) {
    const url = request.nextUrl.clone();
    url.pathname = "/sign-in";
    return NextResponse.redirect(url);
  }

  /**
   * üîπ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ–º–∞—î, –∞–ª–µ –º–∞—Ä—à—Ä—É—Ç –ø—É–±–ª—ñ—á–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
   */
  return NextResponse.next();
}

/**
 * üîπ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ middleware –ª–∏—à–µ –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
 */
export const config = {
  matcher: ["/profile/:path*", "/notes/:path*", "/sign-in", "/sign-up"],
};
